//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbMaterial
// {
//
//   float4 gDiffuseAlbedo;             // Offset:    0 Size:    16
//   float3 gFresnelR0;                 // Offset:   16 Size:    12
//   float gRoughness;                  // Offset:   28 Size:     4
//   float4x4 gMatTransform;            // Offset:   32 Size:    64 [unused]
//
// }
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosW;                   // Offset:  384 Size:    12
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  448
//       float FalloffStart;            // Offset:  460
//       float3 Direction;              // Offset:  464
//       float FalloffEnd;              // Offset:  476
//       float3 Position;               // Offset:  480
//       float SpotPower;               // Offset:  492
//
//   } gLights[16];                     // Offset:  448 Size:   768
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cbMaterial                        cbuffer      NA          NA            cb1      1 
// cbPass                            cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[2], immediateIndexed
dcl_constantbuffer CB2[30], immediateIndexed
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 8
dcl_indexableTemp x0[3], 4
//
// Initial variable locations:
//   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
//   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
//   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
//   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
//
#line 97 "D:\CODE\VSProjects\MyDx12Demo\ep08\Shaders\Default.hlsl"
dp3 r0.x, v2.xyzx, v2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z

#line 100
mov r1.xyz, -v1.xyzx
add r1.xyz, r1.xyzx, cb2[24].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- toEyeW.x; r1.y <- toEyeW.y; r1.z <- toEyeW.z

#line 103
mul r2.xyz, cb1[0].xyzx, cb2[27].xyzx  // r2.x <- ambient.x; r2.y <- ambient.y; r2.z <- ambient.z

#line 105
mov r0.w, -cb1[1].w
add r3.w, r0.w, l(1.000000)  // r3.w <- shininess

#line 106
mov r3.xyz, cb1[1].xyzx  // r3.x <- mat.FresnelR0.x; r3.y <- mat.FresnelR0.y; r3.z <- mat.FresnelR0.z
mov r3.w, r3.w  // r3.w <- mat.Shininess
mov r4.xyz, cb1[0].xyzx  // r4.x <- mat.DiffuseAlbedo.x; r4.y <- mat.DiffuseAlbedo.y; r4.z <- mat.DiffuseAlbedo.z

#line 108
nop 
mov x0[0].xyz, cb2[28].xyzx
mov x0[2].xyz, cb2[29].xyzx
mov r3.xyzw, r3.xyzw
mov r4.xyz, r4.xyzx
mov r0.xyz, r0.xyzx
mov r1.xyz, r1.xyzx

#line 142 "D:\CODE\VSProjects\MyDx12Demo\ep08\Shaders\LightingUtil.hlsl"
mov r5.xyz, l(0,0,0,0)  // r5.x <- result.x; r5.y <- result.y; r5.z <- result.z

#line 149
nop 
mov r6.xyz, x0[0].xyzx
mov r7.xyz, x0[2].xyzx
mov r3.xyzw, r3.xyzw
mov r4.xyz, r4.xyzx
mov r0.xyz, r0.xyzx
mov r1.xyz, r1.xyzx

#line 67
mov r7.xyz, -r7.xyzx  // r7.x <- lightVec.x; r7.y <- lightVec.y; r7.z <- lightVec.z

#line 70
dp3 r0.w, r7.xyzx, r0.xyzx
max r0.w, r0.w, l(0.000000)  // r0.w <- ndotl

#line 71
mul r6.xyz, r0.wwww, r6.xyzx  // r6.x <- lightStrength.x; r6.y <- lightStrength.y; r6.z <- lightStrength.z

#line 73
nop 
mov r6.xyz, r6.xyzx
mov r7.xyz, r7.xyzx
mov r0.xyz, r0.xyzx
mov r1.xyz, r1.xyzx
mov r4.xyz, r4.xyzx
mov r3.xyzw, r3.xyzw

#line 46
mul r0.w, r3.w, l(256.000000)  // r0.w <- m

#line 47
add r1.xyz, r7.xyzx, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- halfVec.x; r1.y <- halfVec.y; r1.z <- halfVec.z

#line 49
add r1.w, r0.w, l(8.000000)
dp3 r0.x, r1.xyzx, r0.xyzx
max r0.x, r0.x, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, r0.w
exp r0.x, r0.x
mul r0.x, r0.x, r1.w
div r0.x, r0.x, l(8.000000)  // r0.x <- roughnessFactor

#line 50
nop 
mov r3.xyz, r3.xyzx
mov r1.xyz, r1.xyzx
mov r7.xyz, r7.xyzx

#line 36
dp3 r0.y, r1.xyzx, r7.xyzx
max r0.y, r0.y, l(0.000000)
min r0.y, r0.y, l(1.000000)  // r0.y <- cosIncidentAngle

#line 38
mov r0.y, -r0.y
add r0.y, r0.y, l(1.000000)  // r0.y <- f0

#line 39
mov r1.xyz, -r3.xyzx
add r1.xyz, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.y, r0.z
mul r0.z, r0.y, r0.z
mul r0.y, r0.y, r0.z
mul r0.yzw, r0.yyyy, r1.xxyz
add r0.yzw, r0.yyzw, r3.xxyz  // r0.y <- reflectPercent.x; r0.z <- reflectPercent.y; r0.w <- reflectPercent.z

#line 41
mov r0.yzw, r0.yyzw  // r0.y <- <SchlickFresnel return value>.x; r0.z <- <SchlickFresnel return value>.y; r0.w <- <SchlickFresnel return value>.z

#line 50
mov r0.yzw, r0.yyzw  // r0.y <- fresnelFactor.x; r0.z <- fresnelFactor.y; r0.w <- fresnelFactor.z

#line 52
mul r0.xyz, r0.xxxx, r0.yzwy  // r0.x <- specAlbedo.x; r0.y <- specAlbedo.y; r0.z <- specAlbedo.z

#line 56
add r1.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
div r0.xyz, r0.xyzx, r1.xyzx

#line 58
add r0.xyz, r0.xyzx, r4.xyzx
mul r0.xyz, r6.xyzx, r0.xyzx  // r0.x <- <BlinnPhong return value>.x; r0.y <- <BlinnPhong return value>.y; r0.z <- <BlinnPhong return value>.z

#line 73
mov r0.xyz, r0.xyzx  // r0.x <- <ComputeDirectionalLight return value>.x; r0.y <- <ComputeDirectionalLight return value>.y; r0.z <- <ComputeDirectionalLight return value>.z

#line 149
mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r0.xyz, r0.xyzx, r5.xyzx  // r0.x <- result.x; r0.y <- result.y; r0.z <- result.z

#line 167
mov r0.xyz, r0.xyzx  // r0.x <- <ComputeLighting return value>.x; r0.y <- <ComputeLighting return value>.y; r0.z <- <ComputeLighting return value>.z

#line 108 "D:\CODE\VSProjects\MyDx12Demo\ep08\Shaders\Default.hlsl"
mov r0.xyz, r0.xyzx  // r0.x <- directLight.x; r0.y <- directLight.y; r0.z <- directLight.z

#line 111
add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z

#line 114
mov r0.w, cb1[0].w  // r0.w <- litColor.w

#line 116
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 87 instruction slots used
